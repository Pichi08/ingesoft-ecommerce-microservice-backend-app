pipeline {
    agent any
    
    // Use configured tools from Global Tools
    tools {
        maven 'Maven-3.9'
    }
    
    // GitHub webhook trigger
    triggers {
        githubPush()
    }
    
    environment {
        SERVICES = 'user-service,favourite-service,product-service,cloud-config,service-discovery'
        MAVEN_OPTS = '-Xmx512m'
        JAVA_HOME = sh(script: '/usr/libexec/java_home -v 11', returnStdout: true).trim()
        MAVEN_HOME = "${HOME}/.jenkins/tools/hudson.tasks.Maven_MavenInstallation/Maven-3.9"
        PATH = "${JAVA_HOME}/bin:${MAVEN_HOME}/bin:/opt/homebrew/bin:/usr/local/bin:${PATH}"
    }
    
    stages {
        stage('Checkout & Branch Detection') {
            steps {
                echo "Starting staging build for microservices: ${SERVICES}"
                cleanWs()
                checkout scm
                
                script {
                    // Detect branch from git log after checkout
                    def branchName = env.BRANCH_NAME
                    
                    if (!branchName || branchName == 'null') {
                        // Get branch from git log decorations
                        def gitLog = sh(script: "git log --oneline --decorate -1", returnStdout: true).trim()
                        
                        // Extract branch from origin/branch-name pattern
                        if (gitLog.contains('origin/develop')) {
                            branchName = 'develop'
                        } else {
                            branchName = 'unknown'
                        }
                    }
                    
                    env.DETECTED_BRANCH = branchName
                    echo "Final detected branch: ${env.DETECTED_BRANCH}"
                    
                    // Check if this is develop branch
                    if (env.DETECTED_BRANCH != 'develop') {
                        currentBuild.result = 'NOT_BUILT'
                        error("Pipeline only runs on 'develop' branch. Current branch: ${env.DETECTED_BRANCH}")
                    }
                    
                    echo "Branch validation passed - proceeding with develop branch build"
                }
                
                // Verify environment
                sh '''
                    echo "=== Environment Verification ==="
                    java -version
                    mvn -version
                    
                    # Ensure minikube is running
                    if ! minikube status >/dev/null 2>&1; then
                        echo "Starting minikube..."
                        minikube start 
                    fi
                    
                    # Configure Docker to use Minikube's daemon
                    eval $(minikube docker-env)
                    docker ps >/dev/null && echo "âœ“ Minikube Docker daemon ready"
                '''
            }
        }
        
        stage('Build & Test') {
            parallel {
                stage('Build & Test User Service') {
                    stages {
                        stage('Build User Service') {
                            steps {
                                dir('user-service') {
                                    sh 'mvn clean compile -q'
                                }
                            }
                        }
                        stage('Unit Test User Service') {
                            steps {
                                dir('user-service') {
                                    sh 'mvn test -Dtest="**/unit/**/*Test*" -q'
                                }
                            }
                            post {
                                always {
                                    junit testResults: "user-service/target/surefire-reports/TEST-*.xml",
                                          allowEmptyResults: true
                                }
                            }
                        }
                    }
                }
                
                stage('Build & Test Favourite Service') {
                    stages {
                        stage('Build Favourite Service') {
                            steps {
                                dir('favourite-service') {
                                    sh 'mvn clean compile -q'
                                }
                            }
                        }
                        stage('Unit Test Favourite Service') {
                            steps {
                                dir('favourite-service') {
                                    sh 'mvn test -Dtest="**/unit/**/*Test*" -q'
                                }
                            }
                            post {
                                always {
                                    junit testResults: "favourite-service/target/surefire-reports/TEST-*.xml",
                                          allowEmptyResults: true
                                }
                            }
                        }
                    }
                }
                
                stage('Build & Test Product Service') {
                    stages {
                        stage('Build Product Service') {
                            steps {
                                dir('product-service') {
                                    sh 'mvn clean compile -q'
                                }
                            }
                        }
                        stage('Unit Test Product Service') {
                            steps {
                                dir('product-service') {
                                    sh 'mvn test -Dtest="**/unit/**/*Test*" -q'
                                }
                            }
                            post {
                                always {
                                    junit testResults: "product-service/target/surefire-reports/TEST-*.xml",
                                          allowEmptyResults: true
                                }
                            }
                        }
                    }
                }
                
                stage('Build & Test Cloud Config') {
                    stages {
                        stage('Build Cloud Config') {
                            steps {
                                dir('cloud-config') {
                                    sh 'mvn clean compile -q'
                                }
                            }
                        }
                        stage('Unit Test Cloud Config') {
                            steps {
                                dir('cloud-config') {
                                    sh 'mvn test -Dtest="**/unit/**/*Test*" -q'
                                }
                            }
                            post {
                                always {
                                    junit testResults: "cloud-config/target/surefire-reports/TEST-*.xml",
                                          allowEmptyResults: true
                                }
                            }
                        }
                    }
                }
                
                stage('Build & Test Service Discovery') {
                    stages {
                        stage('Build Service Discovery') {
                            steps {
                                dir('service-discovery') {
                                    sh 'mvn clean compile -q'
                                }
                            }
                        }
                        stage('Unit Test Service Discovery') {
                            steps {
                                dir('service-discovery') {
                                    sh 'mvn test -Dtest="**/unit/**/*Test*" -q'
                                }
                            }
                            post {
                                always {
                                    junit testResults: "service-discovery/target/surefire-reports/TEST-*.xml",
                                          allowEmptyResults: true
                                }
                            }
                        }
                    }
                }
            }
        }
        
        stage('Integration Tests') {
            parallel {
                stage('Integration Test User Service') {
                    steps {
                        dir('user-service') {
                            sh 'mvn verify -Dtest="**/integration/**/*Test*" -Dspring.profiles.active=test -q'
                        }
                    }
                    post {
                        always {
                            junit testResults: "user-service/target/failsafe-reports/TEST-*.xml",
                                  allowEmptyResults: true
                        }
                    }
                }
                
                stage('Integration Test Favourite Service') {
                    steps {
                        dir('favourite-service') {
                            sh 'mvn verify -Dtest="**/integration/**/*Test*" -Dspring.profiles.active=test -q'
                        }
                    }
                    post {
                        always {
                            junit testResults: "favourite-service/target/failsafe-reports/TEST-*.xml",
                                  allowEmptyResults: true
                        }
                    }
                }
                
                stage('Integration Test Product Service') {
                    steps {
                        dir('product-service') {
                            sh 'mvn verify -Dtest="**/integration/**/*Test*" -Dspring.profiles.active=test -q'
                        }
                    }
                    post {
                        always {
                            junit testResults: "product-service/target/failsafe-reports/TEST-*.xml",
                                  allowEmptyResults: true
                        }
                    }
                }
                
                stage('Integration Test Cloud Config') {
                    steps {
                        dir('cloud-config') {
                            sh 'mvn verify -Dtest="**/integration/**/*Test*" -Dspring.profiles.active=test -q'
                        }
                    }
                    post {
                        always {
                            junit testResults: "cloud-config/target/failsafe-reports/TEST-*.xml",
                                  allowEmptyResults: true
                        }
                    }
                }
                
                stage('Integration Test Service Discovery') {
                    steps {
                        dir('service-discovery') {
                            sh 'mvn verify -Dtest="**/integration/**/*Test*" -Dspring.profiles.active=test -q'
                        }
                    }
                    post {
                        always {
                            junit testResults: "service-discovery/target/failsafe-reports/TEST-*.xml",
                                  allowEmptyResults: true
                        }
                    }
                }
            }
        }
        
        stage('Package & Build Images') {
            parallel {
                stage('Package & Build User Service') {
                    steps {
                        dir('user-service') {
                            script {
                                // Package the application
                                sh 'mvn package -DskipTests -q'
                                
                                // Build Docker image with current build number
                                def imageTag = "stage-${env.BUILD_NUMBER}"
                                
                                sh """
                                    # Use Minikube's Docker daemon
                                    eval \$(minikube docker-env)
                                    
                                    # Build Docker image with single tag
                                    docker build -t user-service:${imageTag} .
                                    
                                    echo "Docker image built: user-service:${imageTag}"
                                """
                            }
                        }
                    }
                }
                
                stage('Package & Build Favourite Service') {
                    steps {
                        dir('favourite-service') {
                            script {
                                // Package the application
                                sh 'mvn package -DskipTests -q'
                                
                                // Build Docker image with current build number
                                def imageTag = "stage-${env.BUILD_NUMBER}"
                                
                                sh """
                                    # Use Minikube's Docker daemon
                                    eval \$(minikube docker-env)
                                    
                                    # Build Docker image with single tag
                                    docker build -t favourite-service:${imageTag} .
                                    
                                    echo "Docker image built: favourite-service:${imageTag}"
                                """
                            }
                        }
                    }
                }
                
                stage('Package & Build Product Service') {
                    steps {
                        dir('product-service') {
                            script {
                                // Package the application
                                sh 'mvn package -DskipTests -q'
                                
                                // Build Docker image with current build number
                                def imageTag = "stage-${env.BUILD_NUMBER}"
                                
                                sh """
                                    # Use Minikube's Docker daemon
                                    eval \$(minikube docker-env)
                                    
                                    # Build Docker image with single tag
                                    docker build -t product-service:${imageTag} .
                                    
                                    echo "Docker image built: product-service:${imageTag}"
                                """
                            }
                        }
                    }
                }
                
                stage('Package & Build Cloud Config') {
                    steps {
                        dir('cloud-config') {
                            script {
                                // Package the application
                                sh 'mvn package -DskipTests -q'
                                
                                // Build Docker image with current build number
                                def imageTag = "stage-${env.BUILD_NUMBER}"
                                
                                sh """
                                    # Use Minikube's Docker daemon
                                    eval \$(minikube docker-env)
                                    
                                    # Build Docker image with single tag
                                    docker build -t cloud-config:${imageTag} .
                                    
                                    echo "Docker image built: cloud-config:${imageTag}"
                                """
                            }
                        }
                    }
                }
                
                stage('Package & Build Service Discovery') {
                    steps {
                        dir('service-discovery') {
                            script {
                                // Package the application
                                sh 'mvn package -DskipTests -q'
                                
                                // Build Docker image with current build number
                                def imageTag = "stage-${env.BUILD_NUMBER}"
                                
                                sh """
                                    # Use Minikube's Docker daemon
                                    eval \$(minikube docker-env)
                                    
                                    # Build Docker image with single tag
                                    docker build -t service-discovery:${imageTag} .
                                    
                                    echo "Docker image built: service-discovery:${imageTag}"
                                """
                            }
                        }
                    }
                }
            }
        }
    }
    
    post {
        always {
            cleanWs()
        }
        
        success {
            echo """
                STAGING BUILD SUCCESS
                Services: ${SERVICES}
                Images Built:
                - user-service:stage-${env.BUILD_NUMBER}
                - favourite-service:stage-${env.BUILD_NUMBER}
                - product-service:stage-${env.BUILD_NUMBER}
                - cloud-config:stage-${env.BUILD_NUMBER}
                - service-discovery:stage-${env.BUILD_NUMBER}
                
                Build Summary:
                - Unit tests: PASSED
                - Integration tests: PASSED  
                - Docker images: BUILT

                All images ready for production deployment.
            """
        }
        
        failure {
            echo "STAGING BUILD FAILED - Check logs for details"
            
            script {
                try {
                    sh '''
                        eval $(minikube docker-env) 2>/dev/null || true
                        for service in user-service favourite-service product-service cloud-config service-discovery; do
                            docker ps -a | grep $service | awk '{print $1}' | xargs -r docker rm -f >/dev/null 2>&1 || true
                        done
                    '''
                } catch (Exception e) {
                    // Cleanup completed silently
                }
            }
        }
        
        unstable {
            echo "Staging build is unstable"
            echo "Some tests may have failed - please review before production"
        }
    }
} 