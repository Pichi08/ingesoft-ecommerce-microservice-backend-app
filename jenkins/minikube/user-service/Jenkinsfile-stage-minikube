pipeline {
    agent any
    
    // Use configured tools from Global Tools
    tools {
        maven 'Maven-3.9'
    }
    
    // GitHub webhook trigger
    triggers {
        githubPush()
    }
    
    environment {
        SERVICE_NAME = 'user-service'
        MAVEN_OPTS = '-Xmx512m'
        JAVA_HOME = sh(script: '/usr/libexec/java_home -v 11', returnStdout: true).trim()
        MAVEN_HOME = "${HOME}/.jenkins/tools/hudson.tasks.Maven_MavenInstallation/Maven-3.9"
        PATH = "${JAVA_HOME}/bin:${MAVEN_HOME}/bin:/opt/homebrew/bin:/usr/local/bin:${PATH}"
    }
    
    stages {
        stage('Checkout & Branch Detection') {
            steps {
                echo "Starting staging build for ${SERVICE_NAME}"
                cleanWs()
                checkout scm
                
                script {
                    // Detect branch after checkout using multiple strategies
                    def branchName = env.BRANCH_NAME
                    
                    if (!branchName || branchName == 'null') {
                        // Strategy 1: Check git log for branch info
                        try {
                            def gitLog = sh(
                                script: "git log --oneline --decorate -1",
                                returnStdout: true
                            ).trim()
                            echo "Git log: ${gitLog}"
                            
                            // Extract branch from origin/branch-name pattern
                            if (gitLog.contains('origin/develop')) {
                                branchName = 'develop'
                            } else if (gitLog.contains('origin/main')) {
                                branchName = 'main'
                            }
                        } catch (Exception e) {
                            echo "Git log strategy failed: ${e.message}"
                        }
                    }
                    
                    if (!branchName || branchName == 'null') {
                        // Strategy 2: Check which remote branch we're tracking
                        try {
                            def remoteBranch = sh(
                                script: "git branch -r --contains HEAD | head -1 | sed 's/.*origin\\///g' | tr -d ' '",
                                returnStdout: true
                            ).trim()
                            echo "Remote branch: ${remoteBranch}"
                            branchName = remoteBranch
                        } catch (Exception e) {
                            echo "Remote branch strategy failed: ${e.message}"
                        }
                    }
                    
                    if (!branchName || branchName == 'null') {
                        // Strategy 3: Use GIT_BRANCH environment variable if available
                        branchName = env.GIT_BRANCH?.replaceAll('origin/', '') ?: 'unknown'
                    }
                    
                    env.DETECTED_BRANCH = branchName
                    echo "Final detected branch: ${env.DETECTED_BRANCH}"
                    
                    // Check if this is develop branch
                    if (env.DETECTED_BRANCH != 'develop') {
                        currentBuild.result = 'NOT_BUILT'
                        error("Pipeline only runs on 'develop' branch. Current branch: ${env.DETECTED_BRANCH}")
                    }
                    
                    echo "✅ Branch validation passed - proceeding with develop branch build"
                }
                
                // Verify environment
                sh '''
                    echo "=== Environment Verification ==="
                    java -version
                    mvn -version
                    
                    # Ensure minikube is running
                    if ! minikube status >/dev/null 2>&1; then
                        echo "Starting minikube..."
                        minikube start --driver=docker --container-runtime=docker --memory=4096 --cpus=2
                    fi
                    
                    # Configure Docker to use Minikube's daemon
                    eval $(minikube docker-env)
                    docker ps >/dev/null && echo "✓ Minikube Docker daemon ready"
                '''
            }
        }
        
        stage('Build & Test') {
            parallel {
                stage('Build Application') {
                    steps {
                        dir(SERVICE_NAME) {
                            sh 'mvn clean compile -q'
                        }
                    }
                }
                
                stage('Unit Tests') {
                    steps {
                        dir(SERVICE_NAME) {
                            sh 'mvn test -q'
                        }
                    }
                    post {
                        always {
                            junit testResults: "${SERVICE_NAME}/target/surefire-reports/TEST-*.xml",
                                  allowEmptyResults: true
                        }
                    }
                }
            }
        }
        
        stage('Integration Tests') {
            steps {
                dir(SERVICE_NAME) {
                    sh 'mvn verify -Dspring.profiles.active=test -q'
                }
            }
            post {
                always {
                    junit testResults: "${SERVICE_NAME}/target/failsafe-reports/TEST-*.xml",
                          allowEmptyResults: true
                }
            }
        }
        
        stage('Package & Build Image') {
            steps {
                dir(SERVICE_NAME) {
                    script {
                        // Package the application
                        sh 'mvn package -DskipTests -q'
                        
                        // Build single Docker image with current build number
                        def imageTag = "stage-${env.BUILD_NUMBER}"
                        
                        sh """
                            # Use Minikube's Docker daemon
                            eval \$(minikube docker-env)
                            
                            # Build Docker image with single tag
                            docker build -t ${SERVICE_NAME}:${imageTag} .
                            
                            echo "Docker image built: ${SERVICE_NAME}:${imageTag}"
                        """
                        
                        // Store image tag for reference
                        env.IMAGE_TAG = imageTag
                    }
                }
            }
        }
    }
    
    post {
        always {
            cleanWs()
        }
        
        success {
            echo """
                STAGING BUILD SUCCESS
                Image: ${SERVICE_NAME}:${env.IMAGE_TAG}
                Build Summary:
                - Unit tests: PASSED
                - Integration tests: PASSED  
                - Docker image: BUILT

                Image ready for production deployment.
            """
        }
        
        failure {
            echo "STAGING BUILD FAILED - Check logs for details"
            
            script {
                try {
                    sh '''
                        eval $(minikube docker-env) 2>/dev/null || true
                        docker ps -a | grep ${SERVICE_NAME} | awk '{print $1}' | xargs -r docker rm -f >/dev/null 2>&1 || true
                    '''
                } catch (Exception e) {
                    // Cleanup completed silently
                }
            }
        }
        
        unstable {
            echo "Staging build is unstable"
            echo "Some tests may have failed - please review before production"
        }
    }
} 