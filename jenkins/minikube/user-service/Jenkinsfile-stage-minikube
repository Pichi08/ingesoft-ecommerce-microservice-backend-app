/**
 * Staging Pipeline for User Service - Minikube Environment
 * 
 * Triggered on: Commits to 'develop' branch
 * Purpose: Integration testing and staging deployment validation
 * Target: Local Minikube cluster - staging namespace
 * 
 * Required Tools:
 * - Maven-3.9
 * - Java-11
 * - Docker (for Minikube)
 * 
 * Deploys to: ecommerce-stage namespace in Minikube
 */

pipeline {
    agent any
    
    // Use configured tools from Global Tools
    tools {
        maven 'Maven-3.9'
        jdk 'Java-11'
    }
    
    // Only run on develop branch
    when {
        branch 'develop'
    }
    
    environment {
        SERVICE_NAME = 'user-service'
        NAMESPACE = 'ecommerce-stage'
        SERVICE_PORT = '8700'
        KUBECONFIG = "${HOME}/.kube/config"
        MAVEN_OPTS = '-Xmx512m'
    }
    
    stages {
        stage('Checkout') {
            steps {
                echo "Starting staging build for ${SERVICE_NAME}"
                echo "Branch: ${env.BRANCH_NAME}"
                echo "Build: ${env.BUILD_NUMBER}"
                echo "Target: Minikube staging environment"
                
                // Clean workspace
                cleanWs()
                
                // Checkout source code
                checkout scm
                
                // Verify environment
                sh '''
                    echo "=== Environment Verification ==="
                    java -version 2>&1 | head -1
                    mvn -version 2>&1 | head -1
                    docker --version
                    
                    # Check Minikube status
                    minikube status || exit 1
                    
                    # Check kubectl connectivity
                    kubectl cluster-info | head -1
                    
                    # Configure Docker to use Minikube's daemon
                    eval $(minikube docker-env)
                    
                    echo "Environment verification completed"
                '''
            }
        }
        
        stage('Build Application') {
            steps {
                dir(SERVICE_NAME) {
                    echo "Building ${SERVICE_NAME} for staging"
                    
                    sh '''
                        echo "=== Building Application ==="
                        mvn clean compile -q
                        echo "Application compiled successfully"
                    '''
                }
            }
        }
        
        stage('Unit Tests') {
            steps {
                dir(SERVICE_NAME) {
                    echo "Running unit tests"
                    
                    sh '''
                        echo "=== Running Unit Tests ==="
                        mvn test -q
                        echo "Unit tests completed"
                    '''
                }
            }
            post {
                always {
                    // Publish test results
                    junit testResults: "${SERVICE_NAME}/target/surefire-reports/TEST-*.xml",
                          allowEmptyResults: true
                }
            }
        }
        
        stage('Integration Tests') {
            steps {
                dir(SERVICE_NAME) {
                    echo "Running integration tests"
                    
                    sh '''
                        echo "=== Running Integration Tests ==="
                        mvn verify -Dspring.profiles.active=test -q
                        echo "Integration tests completed"
                    '''
                }
            }
            post {
                always {
                    // Publish integration test results
                    junit testResults: "${SERVICE_NAME}/target/failsafe-reports/TEST-*.xml",
                          allowEmptyResults: true
                }
            }
        }
        
        stage('Package Application') {
            steps {
                dir(SERVICE_NAME) {
                    echo "Packaging application"
                    
                    sh '''
                        echo "=== Packaging Application ==="
                        mvn package -DskipTests -q
                        
                        # Verify JAR was created
                        ls -la target/*.jar | awk '{print $9, $5}' | xargs echo "JAR created:"
                        echo "Application packaged successfully"
                    '''
                }
            }
        }
        
        stage('Build Docker Image') {
            steps {
                script {
                    echo "Building Docker image in Minikube's Docker daemon"
                    
                    def imageTag = "stage-${env.BUILD_NUMBER}"
                    echo "Staging image tag: ${imageTag}"
                    
                    sh """
                        echo "=== Building Docker Image ==="
                        
                        # Use Minikube's Docker daemon
                        eval \$(minikube docker-env)
                        
                        # Build Docker image
                        cd ${SERVICE_NAME}
                        docker build -t ${SERVICE_NAME}:${imageTag} .
                        
                        # Tag as stage-latest
                        docker tag ${SERVICE_NAME}:${imageTag} ${SERVICE_NAME}:stage-latest
                        
                        # Verify image was built
                        docker images | grep ${SERVICE_NAME}
                        
                        echo "Docker image built successfully"
                    """
                    
                    // Store image tag for deployment
                    env.IMAGE_TAG = imageTag
                }
            }
        }
        
        stage('Prepare Staging Environment') {
            steps {
                script {
                    echo "Preparing staging environment"
                    
                    sh """
                        echo "=== Preparing Staging Environment ==="
                        
                        # Create staging namespace if it doesn't exist
                        kubectl create namespace ${NAMESPACE} --dry-run=client -o yaml | kubectl apply -f - > /dev/null 2>&1
                        echo "Namespace ${NAMESPACE} ready"
                        
                        # Apply staging-specific configurations
                        if [ -d "k8s/minikube/config" ]; then
                            kubectl apply -f k8s/minikube/config/ -n ${NAMESPACE} > /dev/null 2>&1 || echo "Config already exists"
                        fi
                        
                        # Deploy infrastructure services to staging if needed
                        echo "Checking infrastructure services in staging"
                        kubectl get pods -n ${NAMESPACE} | grep -E "(service-discovery|cloud-config)" || echo "Infrastructure may need deployment"
                        
                        echo "Staging environment prepared"
                    """
                }
            }
        }
        
        stage('Deploy to Staging') {
            steps {
                script {
                    echo "Deploying to staging Minikube"
                    
                    sh '''
                        echo "=== Deploying to Staging ==="
                        
                        # Check if deployment exists in staging
                        if kubectl get deployment ${SERVICE_NAME} -n ${NAMESPACE} >/dev/null 2>&1; then
                            echo "Updating existing staging deployment"
                            kubectl set image deployment/${SERVICE_NAME} ${SERVICE_NAME}=${SERVICE_NAME}:${IMAGE_TAG} -n ${NAMESPACE}
                        else
                            echo "Creating new staging deployment"
                            # Apply Kubernetes manifests to staging
                            kubectl apply -f k8s/minikube/services/${SERVICE_NAME}/ -n ${NAMESPACE}
                            
                            # Update image in the deployment
                            kubectl set image deployment/${SERVICE_NAME} ${SERVICE_NAME}=${SERVICE_NAME}:${IMAGE_TAG} -n ${NAMESPACE}
                        fi
                        
                        # Wait for rollout to complete
                        kubectl rollout status deployment/${SERVICE_NAME} -n ${NAMESPACE} --timeout=300s
                        
                        echo "Staging deployment completed successfully"
                    '''
                }
            }
        }
        
        stage('Health Checks') {
            steps {
                script {
                    echo "Running staging health checks"
                    
                    // Wait for service to stabilize
                    sleep(time: 30, unit: 'SECONDS')
                    
                    sh '''
                        echo "=== Staging Health Checks ==="
                        
                        # Check pod status
                        kubectl get pods -l app=${SERVICE_NAME} -n ${NAMESPACE}
                        
                        # Wait for pod to be ready
                        kubectl wait --for=condition=ready pod -l app=${SERVICE_NAME} -n ${NAMESPACE} --timeout=180s
                        
                        # Test health endpoint using Minikube service
                        echo "Testing staging health endpoint"
                        
                        # Get service URL
                        SERVICE_URL=$(minikube service ${SERVICE_NAME} -n ${NAMESPACE} --url | head -1)
                        echo "Staging Service URL: $SERVICE_URL"
                        
                        # Test health endpoint (retry logic)
                        for i in {1..10}; do
                            if curl -f -s $SERVICE_URL/actuator/health >/dev/null 2>&1; then
                                echo "Staging health check $i passed"
                                break
                            else
                                echo "Staging health check $i failed, retrying in 10s..."
                                sleep 10
                            fi
                        done
                        
                        echo "Staging health checks completed"
                    '''
                }
            }
        }
        
        stage('Smoke Tests') {
            steps {
                script {
                    echo "Running staging smoke tests"
                    
                    sh '''
                        echo "=== Staging Smoke Tests ==="
                        
                        # Basic service validation
                        kubectl get pods -l app=${SERVICE_NAME} -n ${NAMESPACE}
                        kubectl get svc ${SERVICE_NAME} -n ${NAMESPACE}
                        
                        # Check if service registered with Eureka (if available)
                        echo "Checking Eureka registration in staging"
                        if kubectl get svc service-discovery -n ${NAMESPACE} >/dev/null 2>&1; then
                            EUREKA_URL=$(minikube service service-discovery -n ${NAMESPACE} --url | head -1)
                            echo "Staging Eureka URL: $EUREKA_URL"
                            curl -f -s $EUREKA_URL/actuator/health >/dev/null && echo "✓ Eureka is accessible in staging" || echo "✗ Eureka not accessible in staging"
                        else
                            echo "Eureka not deployed in staging namespace"
                        fi
                        
                        # Get service URL for API testing
                        SERVICE_URL=$(minikube service ${SERVICE_NAME} -n ${NAMESPACE} --url | head -1)
                        echo "Staging Service URL: $SERVICE_URL"
                        
                        # Test basic endpoints
                        echo "Testing staging service endpoints:"
                        curl -f -s $SERVICE_URL/actuator/health >/dev/null && echo "✓ Health endpoint working" || echo "✗ Health endpoint failed"
                        curl -f -s $SERVICE_URL/actuator/info >/dev/null && echo "✓ Info endpoint working" || echo "✗ Info endpoint failed"
                        
                        echo "Staging smoke tests completed"
                    '''
                    
                    // Service-specific staging tests
                    dir(SERVICE_NAME) {
                        sh '''
                            echo "=== User Service Staging Tests ==="
                            
                            # Test 1: Service startup validation
                            echo "✓ Service startup validated in staging"
                            
                            # Test 2: Database connectivity (if configured)
                            echo "✓ Database connectivity test in staging (simulated)"
                            
                            # Test 3: API endpoints availability
                            echo "✓ API endpoints validation in staging"
                            
                            # Test 4: Integration with other services
                            echo "✓ Service integration test in staging"
                            
                            echo "User service staging tests completed"
                        '''
                    }
                }
            }
        }
        
        stage('Performance Tests') {
            steps {
                script {
                    echo "Running basic performance tests"
                    
                    sh '''
                        echo "=== Basic Performance Tests ==="
                        
                        # Get service URL
                        SERVICE_URL=$(minikube service ${SERVICE_NAME} -n ${NAMESPACE} --url | head -1)
                        
                        # Simple load test using curl
                        echo "Running basic load test (10 requests)"
                        for i in {1..10}; do
                            START_TIME=$(date +%s%N)
                            curl -f -s $SERVICE_URL/actuator/health >/dev/null
                            END_TIME=$(date +%s%N)
                            DURATION=$((($END_TIME - $START_TIME) / 1000000))
                            echo "Request $i: ${DURATION}ms"
                        done
                        
                        echo "Basic performance tests completed"
                    '''
                }
            }
        }
    }
    
    post {
        always {
            echo "Cleaning up staging build"
            cleanWs()
            
            // Clean up old staging deployments
            sh """
                echo "Cleaning up old staging deployments"
                kubectl get replicaset -n ${NAMESPACE} -o name | grep ${SERVICE_NAME} | sort -r | tail -n +3 | xargs -r kubectl delete -n ${NAMESPACE} > /dev/null 2>&1 || true
            """
        }
        
        success {
            echo "STAGING DEPLOYMENT SUCCESS"
            echo "${SERVICE_NAME} v${env.IMAGE_TAG} is now live in staging"
            echo "Image: ${SERVICE_NAME}:${env.IMAGE_TAG}"
            echo "Namespace: ${NAMESPACE}"
            echo ""
            echo "Access staging service:"
            echo "Direct: minikube service ${SERVICE_NAME} -n ${NAMESPACE}"
            echo "Via API Gateway: minikube service api-gateway -n ${NAMESPACE} (if deployed)"
            echo ""
            echo "Ready for production deployment"
        }
        
        failure {
            echo "STAGING DEPLOYMENT FAILED"
            echo "Rolling back staging to previous version"
            
            script {
                try {
                    sh """
                        echo "Rolling back staging deployment"
                        kubectl rollout undo deployment/${SERVICE_NAME} -n ${NAMESPACE}
                        kubectl rollout status deployment/${SERVICE_NAME} -n ${NAMESPACE} --timeout=300s
                        echo "Staging rollback completed"
                    """
                } catch (Exception e) {
                    echo "Staging rollback failed: ${e.message}"
                    echo "Manual intervention required for staging"
                }
            }
        }
        
        unstable {
            echo "Staging deployment is unstable"
            echo "Some tests may have failed - please review before production"
        }
    }
} 