pipeline {
    agent any
    
    // Use configured tools from Global Tools
    tools {
        maven 'Maven-3.9'
    }
    
    environment {
        SERVICES = 'user-service,favourite-service,product-service,cloud-config,service-discovery'
        NAMESPACE = 'ecommerce-system'
        KUBECONFIG = "${HOME}/.kube/config"
        MAVEN_OPTS = '-Xmx512m'
        JAVA_HOME = sh(script: '/usr/libexec/java_home -v 11', returnStdout: true).trim()
        MAVEN_HOME = "${HOME}/.jenkins/tools/hudson.tasks.Maven_MavenInstallation/Maven-3.9"
        PATH = "${JAVA_HOME}/bin:${MAVEN_HOME}/bin:/opt/homebrew/bin:/usr/local/bin:${PATH}"
    }

    // GitHub webhook trigger for main branch
    triggers {
        githubPush()
    }

    stages {
        stage('Checkout & Branch Detection') {
            steps {
                echo "Starting PRODUCTION build for microservices: ${SERVICES}"
                echo "WARNING: This will deploy to PRODUCTION"
                cleanWs()
                checkout scm
                
                script {
                    // Detect branch from git log after checkout
                    def branchName = env.BRANCH_NAME
                    
                    if (!branchName || branchName == 'null') {
                        // Get branch from git log decorations
                        def gitLog = sh(script: "git log --oneline --decorate -1", returnStdout: true).trim()
                        
                        // Extract branch from origin/branch-name pattern
                        if (gitLog.contains('origin/main')) {
                            branchName = 'main'
                        } else {
                            branchName = 'unknown'
                        }
                    }
                    
                    env.DETECTED_BRANCH = branchName
                    echo "Final detected branch: ${env.DETECTED_BRANCH}"
                    
                    // Check if this is main branch
                    if (env.DETECTED_BRANCH != 'main') {
                        currentBuild.result = 'NOT_BUILT'
                        error("Production pipeline only runs on 'main' branch. Current branch: ${env.DETECTED_BRANCH}")
                    }
                    
                    echo "Branch validation passed - proceeding with production build"
                }
                
                // Verify environment
                sh '''
                    echo "=== Environment Verification ==="
                    java -version
                    mvn -version
                    
                    # Check Minikube status
                    minikube status || exit 1
                    
                    # Check kubectl connectivity
                    kubectl cluster-info | head -1
                    
                    # Configure Docker to use Minikube's daemon
                    eval $(minikube docker-env)
                    
                    echo "Environment verification completed"
                '''
            }
        }
        
        stage('Build & Test') {
            parallel {
                stage('Build & Test User Service') {
                    stages {
                        stage('Build User Service') {
                            steps {
                                dir('user-service') {
                                    echo "Building user-service for PRODUCTION"
                                    sh 'mvn clean compile -q'
                                }
                            }
                        }
                        stage('Unit Test User Service') {
                            steps {
                                dir('user-service') {
                                    sh 'mvn test -Dtest="**/unit/**/*Test*" -q'
                                }
                            }
                            post {
                                always {
                                    junit testResults: "user-service/target/surefire-reports/TEST-*.xml",
                                          allowEmptyResults: true
                                }
                            }
                        }
                    }
                }
                
                stage('Build & Test Favourite Service') {
                    stages {
                        stage('Build Favourite Service') {
                            steps {
                                dir('favourite-service') {
                                    echo "Building favourite-service for PRODUCTION"
                                    sh 'mvn clean compile -q'
                                }
                            }
                        }
                        stage('Unit Test Favourite Service') {
                            steps {
                                dir('favourite-service') {
                                    sh 'mvn test -Dtest="**/unit/**/*Test*" -q'
                                }
                            }
                            post {
                                always {
                                    junit testResults: "favourite-service/target/surefire-reports/TEST-*.xml",
                                          allowEmptyResults: true
                                }
                            }
                        }
                    }
                }
                
                stage('Build & Test Product Service') {
                    stages {
                        stage('Build Product Service') {
                            steps {
                                dir('product-service') {
                                    echo "Building product-service for PRODUCTION"
                                    sh 'mvn clean compile -q'
                                }
                            }
                        }
                        stage('Unit Test Product Service') {
                            steps {
                                dir('product-service') {
                                    sh 'mvn test -Dtest="**/unit/**/*Test*" -q'
                                }
                            }
                            post {
                                always {
                                    junit testResults: "product-service/target/surefire-reports/TEST-*.xml",
                                          allowEmptyResults: true
                                }
                            }
                        }
                    }
                }
            }
        }
        
        stage('Integration Tests') {
            parallel {
                stage('Integration Test User Service') {
                    steps {
                        dir('user-service') {
                            sh 'mvn verify -Dtest="**/integration/**/*Test*" -Dspring.profiles.active=test -q'
                        }
                    }
                    post {
                        always {
                            junit testResults: "user-service/target/failsafe-reports/TEST-*.xml",
                                  allowEmptyResults: true
                        }
                    }
                }
                
                stage('Integration Test Product Service') {
                    steps {
                        dir('product-service') {
                            sh 'mvn verify -Dtest="**/integration/**/*Test*" -Dspring.profiles.active=test -q'
                        }
                    }
                    post {
                        always {
                            junit testResults: "product-service/target/failsafe-reports/TEST-*.xml",
                                  allowEmptyResults: true
                        }
                    }
                }
            }
        }

        stage('Package & Build Images') {
            parallel {
                stage('Package & Build User Service') {
                    steps {
                        dir('user-service') {
                            script {
                                echo "Packaging user-service for production"
                                sh 'mvn package -DskipTests -q'
                                
                                // Build Docker image with production tag
                                def imageTag = "v1.0.${env.BUILD_NUMBER}"
                                
                                sh """
                                    # Use Minikube's Docker daemon
                                    eval \$(minikube docker-env)
                                    
                                    # Build Docker image
                                    docker build -t user-service:${imageTag} .
                                    
                                    echo "PRODUCTION Docker image built: user-service:${imageTag}"
                                """
                            }
                        }
                    }
                }
                
                stage('Package & Build Favourite Service') {
                    steps {
                        dir('favourite-service') {
                            script {
                                echo "Packaging favourite-service for production"
                                sh 'mvn package -DskipTests -q'
                                
                                // Build Docker image with production tag
                                def imageTag = "v1.0.${env.BUILD_NUMBER}"
                                
                                sh """
                                    # Use Minikube's Docker daemon
                                    eval \$(minikube docker-env)
                                    
                                    # Build Docker image
                                    docker build -t favourite-service:${imageTag} .
                                    
                                    echo "PRODUCTION Docker image built: favourite-service:${imageTag}"
                                """
                            }
                        }
                    }
                }
                
                stage('Package & Build Product Service') {
                    steps {
                        dir('product-service') {
                            script {
                                echo "Packaging product-service for production"
                                sh 'mvn package -DskipTests -q'
                                
                                // Build Docker image with production tag
                                def imageTag = "v1.0.${env.BUILD_NUMBER}"
                                
                                sh """
                                    # Use Minikube's Docker daemon
                                    eval \$(minikube docker-env)
                                    
                                    # Build Docker image
                                    docker build -t product-service:${imageTag} .
                                    
                                    echo "PRODUCTION Docker image built: product-service:${imageTag}"
                                """
                            }
                        }
                    }
                }
                
                stage('Package & Build Cloud Config') {
                    steps {
                        dir('cloud-config') {
                            script {
                                echo "Packaging cloud-config for production"
                                sh 'mvn package -DskipTests -q'
                                
                                // Build Docker image with production tag
                                def imageTag = "v1.0.${env.BUILD_NUMBER}"
                                
                                sh """
                                    # Use Minikube's Docker daemon
                                    eval \$(minikube docker-env)
                                    
                                    # Build Docker image
                                    docker build -t cloud-config:${imageTag} .
                                    
                                    echo "PRODUCTION Docker image built: cloud-config:${imageTag}"
                                """
                            }
                        }
                    }
                }
                
                stage('Package & Build Service Discovery') {
                    steps {
                        dir('service-discovery') {
                            script {
                                echo "Packaging service-discovery for production"
                                sh 'mvn package -DskipTests -q'
                                
                                // Build Docker image with production tag
                                def imageTag = "v1.0.${env.BUILD_NUMBER}"
                                
                                sh """
                                    # Use Minikube's Docker daemon
                                    eval \$(minikube docker-env)
                                    
                                    # Build Docker image
                                    docker build -t service-discovery:${imageTag} .
                                    
                                    echo "PRODUCTION Docker image built: service-discovery:${imageTag}"
                                """
                            }
                        }
                    }
                }
            }
        }
        
        stage('Prepare Production Environment') {
            steps {
                script {
                    echo "Preparing PRODUCTION environment"
                    
                    sh """
                        echo "=== Preparing PRODUCTION Environment ==="
                        
                        # Ensure production namespace exists
                        kubectl create namespace ${NAMESPACE} --dry-run=client -o yaml | kubectl apply -f - > /dev/null 2>&1
                        echo "Namespace ${NAMESPACE} ready"
                        
                        # Apply production configurations
                        if [ -d "k8s/minikube/config" ]; then
                            kubectl apply -f k8s/minikube/config/ -n ${NAMESPACE} > /dev/null 2>&1 || echo "Config already exists"
                        fi
                        
                        # Ensure infrastructure services are running in production
                        echo "Checking infrastructure services in PRODUCTION"
                        kubectl get pods -n ${NAMESPACE} | grep -E "(service-discovery|cloud-config|api-gateway)" || echo "Infrastructure services may need deployment"
                        
                        echo "PRODUCTION environment prepared"
                    """
                }
            }
        }
        
        stage('Deploy to Production') {
            steps {
                script {
                    echo "Deploying service-discovery to PRODUCTION Minikube"
                    echo "Approved by: ${env.APPROVER}"
                    echo "Strategy: ${params.DEPLOYMENT_TYPE}"
                    
                    sh '''
                        echo "=== Deploying service-discovery to PRODUCTION ==="
                        
                        # Deploy only service-discovery due to resource constraints
                        SERVICE="service-discovery"
                        
                        if kubectl get deployment ${SERVICE} -n ${NAMESPACE} >/dev/null 2>&1; then
                            echo "Updating existing PRODUCTION deployment for ${SERVICE}"
                            kubectl set image deployment/${SERVICE} ${SERVICE}=${SERVICE}:v1.0.${BUILD_NUMBER} -n ${NAMESPACE}
                        else
                            echo "Creating new PRODUCTION deployment for ${SERVICE}"
                            # Apply Kubernetes manifests to production
                            kubectl apply -f k8s/minikube/infrastructure/${SERVICE}/ -n ${NAMESPACE}
                            
                            # Update image in the deployment
                            kubectl set image deployment/${SERVICE} ${SERVICE}=${SERVICE}:v1.0.${BUILD_NUMBER} -n ${NAMESPACE}
                        fi
                        
                        # Wait for rollout to complete (longer timeout for production)
                        kubectl rollout status deployment/${SERVICE} -n ${NAMESPACE} --timeout=900s
                        
                        echo "PRODUCTION deployment of ${SERVICE} completed successfully"
                    '''
                }
            }
        }
        
        stage('Production Health Checks') {
            steps {
                script {
                    echo "Running PRODUCTION health checks for service-discovery"
                    echo "Note: Service Discovery typically takes ~6 minutes to fully initialize"
                    
                    // Wait longer for service-discovery to stabilize (it's slower to start)
                    sleep(time: 120, unit: 'SECONDS')
                    
                    sh '''
                        echo "=== PRODUCTION Health Checks for service-discovery ==="
                        
                        SERVICE="service-discovery"
                        
                        # Check pod status
                        kubectl get pods -l app=${SERVICE} -n ${NAMESPACE}
                        
                        # Wait for pods to be ready (extended timeout for service-discovery)
                        kubectl wait --for=condition=ready pod -l app=${SERVICE} -n ${NAMESPACE} --timeout=600s
                    
                    '''
                }
            }
        }
    }
    
    post {
        always {
            cleanWs()
            
            // Clean up old production deployments (keep more for production)
            sh """
                # Only cleanup service-discovery replicasets since that's the only service deployed
                kubectl get replicaset -n ${NAMESPACE} -o name | grep service-discovery | sort -r | tail -n +5 | xargs -r kubectl delete -n ${NAMESPACE} > /dev/null 2>&1 || true
            """
        }
        
        success {
            echo "PRODUCTION DEPLOYMENT SUCCESS"
            echo "Service Discovery microservice is now LIVE in PRODUCTION:"
            echo "- service-discovery:v1.0.${env.BUILD_NUMBER}"
            echo "Namespace: ${NAMESPACE}"
            echo "Deployment strategy: ${params.DEPLOYMENT_TYPE}"
            echo ""
            echo "Access PRODUCTION service:"
            echo "- Get Service Discovery URL: minikube ip && kubectl get svc service-discovery -n ${NAMESPACE} -o jsonpath='{.spec.ports[0].nodePort}'"
            echo "- Then access via: http://<minikube-ip>:<node-port>"
            echo "- Alternative: kubectl port-forward svc/service-discovery 8761:8761 -n ${NAMESPACE}"
            echo ""
            echo "PRODUCTION deployment completed successfully"
        }
        
        failure {
            echo "PRODUCTION DEPLOYMENT FAILED"
            echo "Rolling back to previous PRODUCTION versions"
            
            script {
                try {
                    sh '''
                        echo "Rolling back PRODUCTION deployment"
                        # Only rollback service-discovery since that's the only service deployed
                        SERVICE="service-discovery"
                        kubectl rollout undo deployment/${SERVICE} -n ${NAMESPACE}
                        kubectl rollout status deployment/${SERVICE} -n ${NAMESPACE} --timeout=900s
                        echo "PRODUCTION rollback completed for ${SERVICE}"
                    '''
                } catch (Exception e) {
                    echo "PRODUCTION rollback failed: ${e.message}"
                    echo "URGENT: Manual intervention required for PRODUCTION"
                }
            }
        }
        
        unstable {
            echo "PRODUCTION deployment is unstable"
            echo "Some tests may have failed - please review immediately"
            echo "Consider rolling back if issues persist"
        }
        
        aborted {
            echo "PRODUCTION deployment was aborted"
            echo "No changes were made to PRODUCTION environment"
        }
    }
} 