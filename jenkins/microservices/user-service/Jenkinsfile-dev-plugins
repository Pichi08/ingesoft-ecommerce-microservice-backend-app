/**
 * Development Pipeline for User Service (Working Azure CLI Plugin)
 * 
 * Triggered on: Feature branches (not main/develop)
 * Purpose: Build validation and unit testing only
 * 
 * USES JENKINS PLUGINS - Requires plugin installation and Global Tools configuration
 * 
 * Required Plugins:
 * - Pipeline
 * - Maven Integration  
 * - JUnit
 * - HTML Publisher
 * 
 * Required Global Tools:
 * - Maven-3.9
 * - Java-11
 * 
 * Note: Development pipeline does NOT deploy to any environment
 */

pipeline {
    agent any
    
    // Use configured tools from Global Tools
    tools {
        maven 'Maven-3.9'
        jdk 'Java-11'
    }
    
    // Run on all branches except main and develop
    when {
        not {
            anyOf {
                branch 'main'
                branch 'develop'
            }
        }
    }
    
    environment {
        SERVICE_NAME = 'user-service'
        MAVEN_OPTS = '-Xmx1024m'
    }
    
    stages {
        stage('🚀 Checkout') {
            steps {
                echo "Starting development build for ${SERVICE_NAME}..."
                echo "Branch: ${env.BRANCH_NAME}"
                echo "Build: ${env.BUILD_NUMBER}"
                echo "Target: Development validation only"
                
                // Clean workspace using plugin
                cleanWs()
                
                // Checkout source code
                checkout scm
                
                // Verify tools are available
                sh '''
                    echo "🔍 Tool Verification:"
                    java -version
                    mvn -version
                '''
            }
        }
        
        stage('🔨 Build Application') {
            steps {
                dir(SERVICE_NAME) {
                    echo "🔨 Building ${SERVICE_NAME} with Maven..."
                    
                    // Use Maven plugin for clean compile
                    sh 'mvn clean compile'
                }
            }
        }
        
        stage('🧪 Unit Tests') {
            steps {
                dir(SERVICE_NAME) {
                    echo "🧪 Running unit tests..."
                    
                    // Run tests with Maven
                    sh 'mvn test'
                }
            }
            post {
                always {
                    // Publish test results using JUnit plugin
                    junit testResultsPattern: "${SERVICE_NAME}/target/surefire-reports/TEST-*.xml",
                          allowEmptyResults: true
                    
                    // Publish test coverage using HTML Publisher plugin
                    publishHTML([
                        allowMissing: true,
                        alwaysLinkToLastBuild: true,
                        keepAll: true,
                        reportDir: "${SERVICE_NAME}/target/site/jacoco",
                        reportFiles: 'index.html',
                        reportName: 'Test Coverage Report'
                    ])
                }
            }
        }
        
        stage('🔍 Code Quality Checks') {
            steps {
                dir(SERVICE_NAME) {
                    echo "🔍 Running code quality checks..."
                    
                    // Run Maven verify for additional checks
                    sh 'mvn verify -DskipTests'
                    
                    // Check for common issues
                    sh '''
                        echo "🔍 Checking for common code issues..."
                        
                        # Check for TODO/FIXME comments
                        echo "=== TODO/FIXME Comments ==="
                        find src -name "*.java" -exec grep -Hn "TODO\\|FIXME" {} \\; || echo "No TODO/FIXME found"
                        
                        # Check for System.out.println (should use logging)
                        echo "=== System.out.println Usage ==="
                        find src -name "*.java" -exec grep -Hn "System\\.out\\.println" {} \\; || echo "No System.out.println found"
                        
                        # Check for hardcoded strings that might need configuration
                        echo "=== Potential Hardcoded Values ==="
                        find src -name "*.java" -exec grep -Hn "localhost\\|127\\.0\\.0\\.1" {} \\; || echo "No hardcoded localhost found"
                    '''
                }
            }
        }
        
        stage('📦 Package Validation') {
            steps {
                dir(SERVICE_NAME) {
                    echo "📦 Validating package creation..."
                    
                    // Package with Maven (but don't deploy)
                    sh 'mvn package -DskipTests'
                    
                    // Verify JAR was created
                    sh '''
                        echo "🔍 Verifying JAR creation..."
                        ls -la target/*.jar
                        
                        echo "🔍 JAR contents verification..."
                        jar -tf target/*.jar | head -20
                    '''
                    
                    // Archive artifacts for development review
                    archiveArtifacts artifacts: 'target/*.jar', 
                                   fingerprint: true,
                                   allowEmptyArchive: true
                }
            }
        }
        
        stage('🧪 Integration Test Preparation') {
            steps {
                dir(SERVICE_NAME) {
                    echo "🧪 Preparing integration test environment..."
                    
                    // Validate integration test configuration
                    sh '''
                        echo "🔍 Checking integration test configuration..."
                        
                        # Check if integration tests exist
                        if [ -d "src/test/java" ]; then
                            find src/test/java -name "*IT.java" -o -name "*IntegrationTest.java" | head -10
                            echo "Integration test files found"
                        else
                            echo "No integration test directory found"
                        fi
                        
                        # Check test resources
                        if [ -d "src/test/resources" ]; then
                            ls -la src/test/resources/
                        else
                            echo "No test resources directory found"
                        fi
                    '''
                }
            }
        }
        
        stage('📊 Development Report') {
            steps {
                script {
                    echo "📊 Generating development build report..."
                    
                    // Get build information
                    def buildInfo = sh(
                        script: """
                            echo "Build Information:"
                            echo "Service: ${SERVICE_NAME}"
                            echo "Branch: ${env.BRANCH_NAME}"
                            echo "Build: ${env.BUILD_NUMBER}"
                            echo "Timestamp: \$(date)"
                            
                            echo "Maven Information:"
                            cd ${SERVICE_NAME}
                            mvn -version
                            
                            echo "JAR Information:"
                            ls -la target/*.jar 2>/dev/null || echo "No JAR files found"
                        """,
                        returnStdout: true
                    )
                    
                    echo "📋 Build Information:\n${buildInfo}"
                    
                    // Create development report
                    writeFile file: 'development-build-report.txt', text: """
DEVELOPMENT BUILD REPORT
========================

Service: ${SERVICE_NAME}
Branch: ${env.BRANCH_NAME}
Build: ${env.BUILD_NUMBER}
Timestamp: ${new Date()}
Environment: Development (Build & Test Only)

Build Information:
${buildInfo}

Status: SUCCESS
Next Steps: Ready for integration testing in staging environment
"""
                    
                    // Archive the report
                    archiveArtifacts artifacts: 'development-build-report.txt', fingerprint: true
                }
            }
        }
    }
    
    post {
        always {
            echo "🧹 Cleaning up development build..."
            
            // Clean workspace using plugin
            cleanWs()
        }
        
        success {
            echo "🎉 DEVELOPMENT BUILD SUCCESS! 🎉"
            echo "✅ ${SERVICE_NAME} build completed successfully"
            echo "✅ Unit tests passed"
            echo "✅ Code quality checks completed"
            echo "✅ Package validation successful"
            echo "🚀 Ready for merge to develop branch!"
        }
        
        failure {
            echo "🚨 DEVELOPMENT BUILD FAILED! 🚨"
            echo "❌ Build failed for ${SERVICE_NAME}"
            echo "🔍 Common issues to check:"
            echo "   - Compilation errors"
            echo "   - Unit test failures"
            echo "   - Maven configuration issues"
            echo "   - Missing dependencies"
            echo "📝 Please fix issues before merging to develop"
        }
        
        unstable {
            echo "⚠️ Development build is unstable"
            echo "Some tests may have failed - please review"
            echo "Consider fixing issues before proceeding"
        }
    }
} 