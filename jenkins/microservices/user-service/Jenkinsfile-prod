pipeline {
    agent any
    
    // Use configured tools from Global Tools
    tools {
        maven 'Maven-3.9'
        jdk 'Java-11'
    }
    
    environment {
        SERVICE_NAME = 'user-service'
        ACR_NAME = 'acrecommerce69'
        AZURE_RESOURCE_GROUP = 'AKS-ecommerce'
        AKS_CLUSTER_NAME = 'KubeCluster'
        NAMESPACE = 'ecommerce-system'
        SERVICE_PORT = '8700'
        MAVEN_OPTS = '-Xmx1024m'
    }
    
    stages {
        stage('Checkout') {
            steps {
                echo "Starting PRODUCTION build for ${SERVICE_NAME}"
                echo "Branch: ${env.BRANCH_NAME}"
                echo "Build: ${env.BUILD_NUMBER}"
                echo "Target: PRODUCTION environment"
                echo "WARNING: This will deploy to PRODUCTION"
                
                // Clean workspace
                cleanWs()
                
                // Checkout source code
                checkout scm
                
                // Verify tools are available
                sh '''
                    echo "Tool Verification:"
                    java -version
                    mvn -version
                    docker --version
                    az version
                '''
            }
        }
        
        stage('Build Application') {
            steps {
                dir(SERVICE_NAME) {
                    echo "Building ${SERVICE_NAME} for PRODUCTION"
                    
                    // Use Maven plugin
                    sh 'mvn clean compile'
                }
            }
        }
        
        stage('Unit Tests') {
            steps {
                dir(SERVICE_NAME) {
                    echo "Running unit tests"
                    
                    // Run tests with Maven
                    sh 'mvn test'
                }
            }
            post {
                always {
                    // Publish test results
                    junit testResults: "${SERVICE_NAME}/target/surefire-reports/TEST-*.xml",
                          allowEmptyResults: true
                }
            }
        }
        
        stage('Integration Tests') {
            steps {
                dir(SERVICE_NAME) {
                    echo "Running integration tests"
                    
                    // Run integration tests with Maven
                    sh 'mvn verify -Dspring.profiles.active=test'
                }
            }
            post {
                always {
                    // Publish integration test results
                    junit testResults: "${SERVICE_NAME}/target/failsafe-reports/TEST-*.xml",
                          allowEmptyResults: true
                }
            }
        }
        
        
        stage('Package Application') {
            steps {
                dir(SERVICE_NAME) {
                    echo "Packaging application for production"
                    
                    // Package with Maven
                    sh 'mvn package -DskipTests'
                }
            }
        }
        
        stage('Build and Push Docker Image') {
            steps {
                script {
                    echo "Building and pushing Docker image for PRODUCTION"
                    
                    // Generate production version tag
                    def cleanBranch = env.BRANCH_NAME.replaceAll(/[^a-zA-Z0-9]/, '-').toLowerCase()
                    def imageTag = "v1.0.${env.BUILD_NUMBER}"
                    echo "Production image tag: ${imageTag}"
                    
                    // Use Azure CLI to authenticate and push
                    azureCLI(
                        principalCredentialId: 'azure-credentials',
                        commands: [
                            [script: 'echo "Azure CLI Authentication successful"'],
                            [script: 'az account show'],
                            [script: 'echo "Logging into Azure Container Registry"'],
                            [script: "az acr login --name ${ACR_NAME}"],
                            [script: 'echo "Building Docker image for PRODUCTION"'],
                            [script: "docker build -t ${ACR_NAME}.azurecr.io/${SERVICE_NAME}:${imageTag} -f ${SERVICE_NAME}/Dockerfile ."],
                            [script: 'echo "Pushing Docker image to ACR"'],
                            [script: "docker push ${ACR_NAME}.azurecr.io/${SERVICE_NAME}:${imageTag}"],
                            [script: 'echo "Tagging as production-latest"'],
                            [script: "docker tag ${ACR_NAME}.azurecr.io/${SERVICE_NAME}:${imageTag} ${ACR_NAME}.azurecr.io/${SERVICE_NAME}:production-latest"],
                            [script: "docker push ${ACR_NAME}.azurecr.io/${SERVICE_NAME}:production-latest"],
                            [script: 'echo "Production Docker image pushed successfully"']
                        ]
                    )
                    
                    // Store image tag for deployment
                    env.IMAGE_TAG = imageTag
                }
            }
        }
        
        stage('Prepare Production Environment') {
            steps {
                script {
                    echo "Preparing PRODUCTION environment"
                    
                    // Use Azure CLI to get AKS credentials
                    azureCLI(
                        principalCredentialId: 'azure-credentials',
                        commands: [
                            [script: 'echo "Getting AKS credentials for PRODUCTION"'],
                            [script: "az aks get-credentials --resource-group ${AZURE_RESOURCE_GROUP} --name ${AKS_CLUSTER_NAME} --overwrite-existing"],
                            [script: 'echo "Verifying cluster connection"'],
                            [script: 'kubectl cluster-info']
                        ]
                    )
                    
                    // Ensure namespace exists
                    sh """
                        kubectl create namespace ${NAMESPACE} --dry-run=client -o yaml | kubectl apply -f -
                        echo "Namespace ${NAMESPACE} ready"
                    """
                    
                    // Apply Kubernetes configurations
                    sh """
                        if [ -d "k8s/services/${SERVICE_NAME}" ]; then
                            kubectl apply -f k8s/services/${SERVICE_NAME}/
                            echo "Kubernetes configuration applied"
                        else
                            echo "No Kubernetes configuration found"
                        fi
                    """
                }
            }
        }
        
        stage('Manual Approval') {
            steps {
                script {
                    echo "PRODUCTION DEPLOYMENT APPROVAL REQUIRED"
                    echo "Review the following before approving:"
                    echo "- All tests passed"
                    echo "- Security scans completed"
                    echo "- Docker image built and pushed"
                    echo "- Production environment prepared"
                    echo ""
                    echo "Deployment Details:"
                    echo "Service: ${SERVICE_NAME}"
                    echo "Image: ${ACR_NAME}.azurecr.io/${SERVICE_NAME}:${env.IMAGE_TAG}"
                    echo "Namespace: ${NAMESPACE}"
                    echo "Build: ${env.BUILD_NUMBER}"
                    echo ""
                    echo "WARNING: This will deploy to PRODUCTION environment"
                    
                    // Manual approval step
                    timeout(time: 30, unit: 'MINUTES') {
                        input message: 'Deploy to PRODUCTION?', 
                              ok: 'Deploy to Production',
                              submitterParameter: 'APPROVER',
                              parameters: [
                                  choice(name: 'DEPLOYMENT_TYPE', 
                                         choices: ['Rolling Update', 'Blue-Green'], 
                                         description: 'Select deployment strategy'),
                                  booleanParam(name: 'SKIP_HEALTH_CHECKS', 
                                              defaultValue: false, 
                                              description: 'Skip health checks (not recommended)')
                              ]
                    }
                    
                    echo "Production deployment approved by: ${env.APPROVER}"
                    echo "Deployment strategy: ${params.DEPLOYMENT_TYPE}"
                }
            }
        }
        
        stage('Deploy to Production') {
            steps {
                script {
                    echo "Deploying to PRODUCTION Kubernetes"
                    echo "Approved by: ${env.APPROVER}"
                    echo "Strategy: ${params.DEPLOYMENT_TYPE}"
                    
                    try {
                        // Deploy to Kubernetes
                        sh """
                            echo "Updating PRODUCTION deployment with new image"
                            kubectl set image deployment/${SERVICE_NAME} ${SERVICE_NAME}=${ACR_NAME}.azurecr.io/${SERVICE_NAME}:${env.IMAGE_TAG} -n ${NAMESPACE}
                            
                            echo "Waiting for PRODUCTION rollout to complete"
                            kubectl rollout status deployment/${SERVICE_NAME} -n ${NAMESPACE} --timeout=600s
                            
                            echo "PRODUCTION deployment completed successfully"
                        """
                        
                    } catch (Exception e) {
                        echo "PRODUCTION deployment failed: ${e.message}"
                        throw e
                    }
                }
            }
        }
        
        stage('Production Health Checks') {
            steps {
                script {
                    if (params.SKIP_HEALTH_CHECKS) {
                        echo "Health checks skipped by user request"
                        return
                    }
                    
                    echo "Running PRODUCTION health checks"
                    
                    // Wait for service to stabilize
                    sleep(time: 60, unit: 'SECONDS')
                    
                    // Extended health checks for production
                    timeout(time: 5, unit: 'MINUTES') {
                        sh """
                            echo "Testing PRODUCTION service health"
                            
                            # Port forward in background
                            kubectl port-forward svc/${SERVICE_NAME} ${SERVICE_PORT}:${SERVICE_PORT} -n ${NAMESPACE} &
                            PF_PID=\$!
                            
                            # Wait for port forward to establish
                            sleep 15
                            
                            # Test health endpoint multiple times
                            for i in {1..10}; do
                                if curl -f http://localhost:${SERVICE_PORT}/actuator/health; then
                                    echo "Health check \$i passed"
                                    sleep 5
                                else
                                    echo "Health check \$i failed"
                                    kill \$PF_PID || true
                                    exit 1
                                fi
                            done
                            
                            # Kill port forward
                            kill \$PF_PID || true
                            echo "All PRODUCTION health checks passed"
                        """
                    }
                }
            }
        }
        
        stage('Production Smoke Tests') {
            steps {
                script {
                    echo "Running PRODUCTION smoke tests"
                    
                    // Comprehensive smoke tests for production
                    sh """
                        echo "Running PRODUCTION smoke tests"
                        
                        # Check pods are running
                        kubectl get pods -l app=${SERVICE_NAME} -n ${NAMESPACE}
                        
                        # Check service is available
                        kubectl get svc ${SERVICE_NAME} -n ${NAMESPACE}
                        
                        # Verify all pods are ready
                        kubectl wait --for=condition=ready pod -l app=${SERVICE_NAME} -n ${NAMESPACE} --timeout=300s
                        
                        # Check resource usage
                        kubectl top pods -l app=${SERVICE_NAME} -n ${NAMESPACE} || echo "Metrics not available"
                    """
                    
                    // Service-specific production tests
                    dir(SERVICE_NAME) {
                        sh '''
                            echo "Running user service PRODUCTION smoke tests"
                            
                            # Test 1: Check if service is registered with Eureka
                            echo "Testing Eureka registration in PRODUCTION"
                            
                            # Test 2: Check database connectivity
                            echo "Testing database connectivity in PRODUCTION"
                            
                            # Test 3: Check API endpoints availability
                            echo "Testing API endpoints in PRODUCTION"
                            
                            echo "User service PRODUCTION smoke tests completed"
                        '''
                    }
                }
            }
        }
    }
    
    post {
        always {
            echo "Cleaning up PRODUCTION build"
            cleanWs()
            
            // Clean up old deployments (keep more for production)
            sh """
                echo "Cleaning up old PRODUCTION deployments"
                kubectl get replicaset -n ${NAMESPACE} -o name | grep ${SERVICE_NAME} | sort -r | tail -n +6 | xargs -r kubectl delete -n ${NAMESPACE} || true
            """
        }
        
        success {
            echo "PRODUCTION DEPLOYMENT SUCCESS"
            echo "${SERVICE_NAME} v${env.IMAGE_TAG} is now LIVE in PRODUCTION"
            echo "Image: ${ACR_NAME}.azurecr.io/${SERVICE_NAME}:${env.IMAGE_TAG}"
            echo "Namespace: ${NAMESPACE}"
            echo "Approved by: ${env.APPROVER}"
            echo "PRODUCTION deployment completed successfully"
        }
        
        failure {
            echo "PRODUCTION DEPLOYMENT FAILED"
            echo "Rolling back to previous PRODUCTION version"
            
            script {
                try {
                    sh """
                        echo "Rolling back PRODUCTION deployment"
                        kubectl rollout undo deployment/${SERVICE_NAME} -n ${NAMESPACE}
                        kubectl rollout status deployment/${SERVICE_NAME} -n ${NAMESPACE} --timeout=600s
                        echo "PRODUCTION rollback completed"
                    """
                } catch (Exception e) {
                    echo "PRODUCTION rollback failed: ${e.message}"
                    echo "URGENT: Manual intervention required for PRODUCTION"
                }
            }
        }
        
        unstable {
            echo "PRODUCTION deployment is unstable"
            echo "Some tests may have failed - please review immediately"
            echo "Consider rolling back if issues persist"
        }
        
        aborted {
            echo "PRODUCTION deployment was aborted"
            echo "No changes were made to PRODUCTION environment"
        }
    }
} 